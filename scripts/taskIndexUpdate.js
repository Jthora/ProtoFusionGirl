// taskIndexUpdate.js
// Usage: node scripts/taskIndexUpdate.js
// Onboarding: Regenerates the task_index.artifact from all task.artifact files for discoverability and tracking.

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ARTIFACTS_DIR = path.join(__dirname, '../artifacts');
const INDEX_FILE = path.join(ARTIFACTS_DIR, 'task_index.artifact');
const today = new Date().toISOString().slice(0, 10);

const files = fs.readdirSync(ARTIFACTS_DIR).filter(f => f.endsWith('.artifact') && f.startsWith('task_'));
const tasks = files.map(f => {
  const content = fs.readFileSync(path.join(ARTIFACTS_DIR, f), 'utf8');
  const get = (key) => {
    const m = content.match(new RegExp(key + ': ([^\n]+)'));
    return m ? m[1].replace(/['\[\]]/g, '').trim() : '';
  };
  return {
    id: get('artifact'),
    status: get('status'),
    priority: get('priority'),
    assignee: get('assignee'),
    purpose: get('purpose'),
    related: get('related'),
    lastUpdated: today,
    file: f
  };
});

const header = `---\nartifact: task_index\ncreated: ${today}\npurpose: Manifest and metadata index for all task.artifact files in the project.\ntype: index\ntags: [task, index, manifest, ai, copilot]\nrelated: [artifact_index.artifact, copilot_advanced_todos_2025-06-03.artifact]\nformat: markdown\n---\n\n# Task Index\n\n- Lists all tasks, their status, priority, assignee, and related artifacts/scripts.\n- Auto-generated by scripts/taskIndexUpdate.js.\n\n## Tasks\n`;
const list = tasks.map(t => `- [${t.status}] (${t.priority}) ${t.purpose} (Assignee: ${t.assignee}) [${t.file}]\n    Related: ${t.related}`).join('\n');

function printHelp() {
  console.log(`\nUsage: node scripts/taskIndexUpdate.js [--json] [--help]\n`);
  console.log('Onboarding: Regenerates the task_index.artifact from all task.artifact files for discoverability and tracking.');
  console.log('\nOptions:');
  console.log('  --json   Output result in machine-readable JSON format.');
  console.log('  --help   Show this help message.');
}

const args = process.argv.slice(2);
if (args.includes('--help')) {
  printHelp();
  process.exit(0);
}
const outputJson = args.includes('--json');

fs.writeFileSync(INDEX_FILE, header + '\n' + list + '\n');
if (outputJson) {
  console.log(JSON.stringify({ updated: INDEX_FILE, taskCount: tasks.length, tasks, usage: 'node scripts/taskIndexUpdate.js [--json] [--help]' }, null, 2));
} else {
  console.log(`Updated ${INDEX_FILE} with ${tasks.length} tasks.`);
}
