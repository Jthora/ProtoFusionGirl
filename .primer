---
project: ProtoFusionGirl
created: 2025-06-03
purpose: AI/Human onboarding, project header, and automation conventions
format: markdown
references:
  - .persona
  - .priming
  - .manifest
  - .datapack
  - .schema
  - docs/
  - scripts/
minimum_versions:
  node: '18.0.0'
  npm: '8.0.0'
  os: 'macOS, Linux, Windows'
agent_capabilities:
  - Automate onboarding, validation, and context sync
  - Generate, update, and validate artifacts and tasks
  - Escalate missing context or blockers via feedback artifacts
  - Never make undocumented or destructive changes
  - Propose improvements and auto-generate documentation
agent_instructions:
  - Always run scripts/guidedOnboarding.js --auto for onboarding, validation, and context sync
  - Copilot/agents must self-onboard for EVERY file and context change
  - Onboarding is fully autonomous and requires no human intervention
  - Do NOT use any other onboarding/validation scripts directly
  - Escalate unclear requirements or blockers via feedback artifacts
  - Halt automation if validation fails or context is missing

# ProtoFusionGirl Primer

This file is the AI's header and onboarding guide. It defines the project's purpose, automation entry points, and best practices for both AI and human contributors.

## How the AI Operates (Primer Technique)
- **Read the Primer First:** The AI always reads `.primer` before acting. This sets the rules, conventions, and automation entry points.
- **Use the Datapack for Deep Context:** The AI references `.datapack` for inspiration, technical details, and conceptual patterns.
- **Automate via Scripts:** All automation is driven by scripts in `scripts/`, with `aiTaskManager.js` as the universal entry point. Every script is a plugin, discoverable and invokable by the AI.
- **Persist Context as Artifacts:** All persistent memory, tasks, and design context are stored as `.artifact` files. These are indexed and cross-linked for rapid recall and automation.
- **Self-Healing & Self-Expanding:** The AI can bootstrap, repair, and expand its own context using onboarding, dashboard, and self-prompt scripts. If context is missing, the AI can regenerate it from scratch.
- **Human-AI Collaboration:** The system signals when human input is needed, but maximizes AI autonomy for onboarding, automation, and context expansion.

## Onboarding Checklist (AI & Human)
1. **Read this `.primer`** for project rules, conventions, and automation entry points.
2. **Read `artifacts/instructions.md`** for a detailed guide to artifacts, automation, best practices, and the full Copilot/AI workflow. This file explains:
   - What artifacts are and how to use them
   - Folder structure and key files
   - The modular command center and plugin architecture
   - Artifact lifecycle, best practices, and quickstart for Copilot/AI
   - Human contributor guidelines and example artifact headers
   - Key automation scripts and workflows
3. **Read `.datapack`** for deep context, inspiration, and technical details.
4. **Run `aiTaskManager.js`** for all automation, onboarding, and context actions. Use `help` for discoverability.
5. **Use artifacts and scripts** for all persistent memory, automation, and context expansion. Keep everything indexed and cross-linked.

## Quickstart
- Start with this `.primer` and `artifacts/instructions.md`.
- Use `aiTaskManager.js` for all actions (automation, onboarding, task, artifact, and self-prompt management).
- Reference `.datapack` for deep context and creative/technical inspiration.
- Let Copilot/AI automate, recall, and expand context as much as possible. Human contributors should assist as needed and keep documentation up to date.

# ðŸš¦ Copilot/AI Agent: Full Autonomous Onboarding Flow

**Phase 1: Core Context & Rules**
1. Read `.primer` for project rules, automation entry points, and best practices.
2. Read `.priming` for agent-specific context, instructions, and persona rules.
3. Read `.manifest` for a live index of all artifacts, scripts, and key files.
4. Read `.dashboard` for project status, open tasks, and onboarding pass/fail.
5. Read `.feedback` for recent issues, blockers, and resolutions.

**Phase 2: Artifact & Documentation Index**
6. Read `artifacts/ai_onboarding_*.artifact` for onboarding flow/checklist.
7. Read `artifacts/artifact_index.artifact` for a manifest of all artifacts.
8. Read `artifacts/copilot_memory.artifact` for persistent AI memory and heuristics.
9. Read `artifacts/gameplay_alignment_checklist_*.artifact` for gameplay alignment.
10. Read `artifacts/upgrade_roadmap_*.artifact` for upgrade priorities.
11. Read `docs/docs_index_L1.json` and `docs/docs_index_L2.json` for documentation lookup.

**Phase 3: Scripts & Automation**
12. List all scripts in `scripts/` (see `scripts_index.artifact`).
13. Run `node scripts/guidedOnboarding.js --auto` for onboarding, validation, and context sync.
14. Run `node scripts/listScripts.js` to discover automation tools.
15. Run `node scripts/checkArtifactCodeSync.js` to verify code/artifact linkage.

**Phase 4: Directory & Data**
16. Read and scan `directory-structure.txt` for current project structure.
17. Read all `README.md` files in `artifacts/`, `tasks/`, `persona_core/`, `data/`, `docs/`, `scripts/`.
18. Review all `.task` files in `tasks/` for open/completed tasks.

**Phase 5: Validation & Test**
19. Run all tests using the `Run All Tests` VS Code task or `npx jest`.
20. If onboarding or validation fails, escalate via a feedback artifact in `tasks/`.

**Always:** Rerun onboarding after any major change, and keep all context, memory, and cross-links up to date.

---

For deep context, see `.datapack`. For persistent memory, see artifacts/. For full onboarding and automation details, see `artifacts/instructions.md`.
